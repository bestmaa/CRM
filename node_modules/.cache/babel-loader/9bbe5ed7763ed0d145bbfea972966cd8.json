{"ast":null,"code":"import config from \"../config.js\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nexport var FETCH_TESTS_BEGIN = 'FETCH_TESTS_BEGIN';\nexport var FETCH_TESTS_SUCCESS = 'FETCH_TESTS_SUCCESS';\nexport var EDIT_TESTS_SUCCESS = 'EDIT_TESTS_SUCCESS';\nexport var FETCH_TESTS_FAILURE = 'FETCH_TESTS_FAILURE';\nexport var FETCH_PAID_TESTS_SUCCESS = 'FETCH_PAID_TESTS_SUCCESS';\nexport var CREATE_PAID_TEST_SUCCESS = 'CREATE_PAID_TEST_SUCCESS';\nexport var UPDATE_TEST_PDF_SUCCESS = 'UPDATE_TEST_PDF_SUCCESS';\nexport var fetchTestsBegin = function fetchTestsBegin() {\n  return {\n    type: FETCH_TESTS_BEGIN\n  };\n};\nexport var fetchTestsSuccess = function fetchTestsSuccess(tests, ary) {\n  return {\n    type: FETCH_TESTS_SUCCESS,\n    payload: {\n      tests,\n      ary\n    }\n  };\n};\nexport var updateTestPdfSuccess = function updateTestPdfSuccess(test) {\n  return {\n    type: UPDATE_TEST_PDF_SUCCESS,\n    payload: {\n      test\n    }\n  };\n};\nexport var createPaidTestSuccess = function createPaidTestSuccess(paid_tests) {\n  return {\n    type: CREATE_PAID_TEST_SUCCESS,\n    payload: {\n      paid_tests\n    }\n  };\n};\nexport var fetchPaidTestsSuccess = function fetchPaidTestsSuccess(paid_tests) {\n  return {\n    type: FETCH_PAID_TESTS_SUCCESS,\n    payload: {\n      paid_tests\n    }\n  };\n};\nexport var editTestsSuccess = function editTestsSuccess(tests, ary) {\n  return {\n    type: EDIT_TESTS_SUCCESS,\n    payload: {\n      tests,\n      ary\n    }\n  };\n};\nexport var fetchTestsFailure = function fetchTestsFailure(error) {\n  return {\n    type: FETCH_TESTS_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\nexport function fetchTests() {\n  return function (dispatch) {\n    axios.get(config.baseURLApi + 'get_tests').then(function (response) {\n      dispatch(fetchTestsSuccess(response.data.data));\n    }).catch(function (error) {\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n}\nexport function fetchPaidTests() {\n  console.log(\"fetchPaidTests\");\n  return function (dispatch) {\n    axios.get(config.baseURLApi + 'get_paid_tests').then(function (response) {\n      console.log(response.data.data);\n      dispatch(fetchPaidTestsSuccess(response.data.data));\n    }).catch(function (error) {\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n}\nexport function createTest(data) {\n  var _this = this;\n\n  console.log(data);\n  console.log(config.baseURLApi + \"create_test\");\n  return function (dispatch) {\n    var self = _this;\n    axios.post(config.baseURLApi + 'create_test', {\n      user_Id: data.user_id,\n      test_id: data.test_id\n    }).then(function (response) {\n      Swal.fire({\n        icon: 'success',\n        type: 'success',\n        text: 'New Test added successfully!',\n        showConfirmButton: true,\n        timer: 3500\n      });\n      console.log(\"-----------000000\", response);\n      dispatch(createPaidTestSuccess(response.data.test)); // window.location.assign('/');\n    }).catch(function (error) {\n      console.log(error);\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n}\nexport function updateTest(data) {\n  return function (dispatch) {\n    axios.post(config.baseURLApi + \"updateTest/\", {\n      id: data.id,\n      title: data.title,\n      description: data.description\n    }).then(function (response) {\n      window.location.reload();\n    }).catch(function (error) {\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n}\nexport function getTest(data) {\n  return function (dispatch) {\n    axios({\n      method: 'get',\n      url: config.baseURLApi + \"get_test/\" + data.id\n    }).then(function (response) {\n      var mimeType = 'image/*';\n      var buffer = response.data.data.image;\n      var b64 = new Buffer(buffer).toString('base64');\n      var ary = \"data:\".concat(mimeType, \";base64,\").concat(b64);\n      dispatch(editTestsSuccess(response.data.data, ary));\n      return response.data.data;\n    }).catch(function (error) {\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n}\nexport function deleteTest(data) {\n  return function (dispatch) {\n    axios({\n      method: 'delete',\n      url: config.baseURLApi + \"delete_test/\" + data.id\n    }).then(function (response) {\n      return response.data.data;\n    }).catch(function (error) {\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n} // Handle HTTP errors since fetch won't.\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport function updateTestPdf(data) {\n  return function (dispatch) {\n    axios.post(config.baseURLApi + 'update_pdf', {\n      user_id: data.user_id,\n      pdf_blob: data.blob,\n      order_id: data.order_id\n    }).then(function (response) {\n      console.log(\"respose from action\", response);\n      dispatch(updateTestPdfSuccess(response.data.test));\n    }).catch(function (error) {\n      dispatch(fetchTestsFailure(error));\n    });\n  };\n}","map":{"version":3,"sources":["D:/30-12/setup 2 new/final file/src/actions/test.js"],"names":["config","axios","Swal","FETCH_TESTS_BEGIN","FETCH_TESTS_SUCCESS","EDIT_TESTS_SUCCESS","FETCH_TESTS_FAILURE","FETCH_PAID_TESTS_SUCCESS","CREATE_PAID_TEST_SUCCESS","UPDATE_TEST_PDF_SUCCESS","fetchTestsBegin","type","fetchTestsSuccess","tests","ary","payload","updateTestPdfSuccess","test","createPaidTestSuccess","paid_tests","fetchPaidTestsSuccess","editTestsSuccess","fetchTestsFailure","error","fetchTests","dispatch","get","baseURLApi","then","response","data","catch","fetchPaidTests","console","log","createTest","self","post","user_Id","user_id","test_id","fire","icon","text","showConfirmButton","timer","updateTest","id","title","description","window","location","reload","getTest","method","url","mimeType","buffer","image","b64","Buffer","toString","deleteTest","handleErrors","ok","Error","statusText","updateTestPdf","pdf_blob","blob","order_id"],"mappings":"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","sourcesContent":["import config from \"../config.js\";\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nexport const FETCH_TESTS_BEGIN   = 'FETCH_TESTS_BEGIN';\r\nexport const FETCH_TESTS_SUCCESS = 'FETCH_TESTS_SUCCESS';\r\nexport const EDIT_TESTS_SUCCESS = 'EDIT_TESTS_SUCCESS';\r\nexport const FETCH_TESTS_FAILURE = 'FETCH_TESTS_FAILURE';\r\nexport const FETCH_PAID_TESTS_SUCCESS = 'FETCH_PAID_TESTS_SUCCESS';\r\nexport const CREATE_PAID_TEST_SUCCESS = 'CREATE_PAID_TEST_SUCCESS';\r\nexport const UPDATE_TEST_PDF_SUCCESS = 'UPDATE_TEST_PDF_SUCCESS';\r\n\r\nexport const fetchTestsBegin = () => ({\r\n  type: FETCH_TESTS_BEGIN\r\n});\r\n\r\nexport const fetchTestsSuccess = (tests, ary) => ({\r\n  type: FETCH_TESTS_SUCCESS,\r\n  payload: { tests, ary }\r\n});\r\n\r\nexport const updateTestPdfSuccess = (test) => ({\r\n  type: UPDATE_TEST_PDF_SUCCESS,\r\n  payload: { test }\r\n});\r\n\r\nexport const createPaidTestSuccess = (paid_tests) => ({\r\n  type: CREATE_PAID_TEST_SUCCESS,\r\n  payload: { paid_tests }\r\n});\r\n\r\nexport const fetchPaidTestsSuccess = (paid_tests) => ({\r\n  type: FETCH_PAID_TESTS_SUCCESS,\r\n  payload: { paid_tests}\r\n});\r\n\r\nexport const editTestsSuccess = (tests, ary) => ({\r\n  type: EDIT_TESTS_SUCCESS,\r\n  payload: { tests, ary }\r\n});\r\n\r\nexport const fetchTestsFailure = error => ({\r\n  type: FETCH_TESTS_FAILURE,\r\n  payload: { error }\r\n});\r\n\r\nexport function fetchTests() {\r\n  return (dispatch) => {\r\n    axios.get(config.baseURLApi+'get_tests')\r\n        .then(function (response) {\r\n          dispatch(fetchTestsSuccess(response.data.data));\r\n        })\r\n        .catch(function (error) {\r\n            dispatch(fetchTestsFailure(error))\r\n        })\r\n    }\r\n}\r\nexport function fetchPaidTests() {\r\n  console.log(\"fetchPaidTests\");\r\n  return (dispatch) => {\r\n    axios.get(config.baseURLApi+'get_paid_tests')\r\n        .then(function (response) {\r\n          console.log(response.data.data);\r\n          dispatch(fetchPaidTestsSuccess(response.data.data));\r\n        })\r\n        .catch(function (error) {\r\n            dispatch(fetchTestsFailure(error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function createTest(data) {\r\n  console.log(data);\r\n  console.log(config.baseURLApi+\"create_test\");\r\n  return (dispatch) => {\r\n          let self = this;\r\n            axios.post(config.baseURLApi+'create_test', {user_Id: data.user_id, test_id: data.test_id})\r\n                .then(function (response) {\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        type: 'success',\r\n                        text: 'New Test added successfully!',\r\n                        showConfirmButton: true,\r\n                        timer: 3500\r\n                    });\r\n                    console.log(\"-----------000000\",response);\r\n                    dispatch(createPaidTestSuccess(response.data.test));\r\n                    // window.location.assign('/');\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                    dispatch(fetchTestsFailure(error));\r\n                })\r\n\r\n  }\r\n}\r\n\r\nexport function updateTest(data) {\r\n  return (dispatch) => {\r\n    axios.post( config.baseURLApi+\"updateTest/\", {id: data.id, title: data.title, description: data.description})\r\n    .then((response) => {\r\n      window.location.reload();\r\n    })\r\n    .catch((error) => {\r\n      dispatch(fetchTestsFailure(error))\r\n    });\r\n    }\r\n}\r\n\r\nexport function getTest(data) {\r\n  return (dispatch) => {\r\n    axios({\r\n      method: 'get',\r\n      url: config.baseURLApi+\"get_test/\"+data.id,\r\n      })\r\n    .then((response) => {\r\n      const mimeType = 'image/*';\r\n      const buffer = response.data.data.image;\r\n      const b64 = new Buffer(buffer).toString('base64')\r\n      var ary=`data:${mimeType};base64,${b64}`\r\n\r\n      dispatch(editTestsSuccess(response.data.data, ary));\r\n      return response.data.data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(fetchTestsFailure(error))\r\n    });\r\n    }\r\n}\r\n\r\nexport function deleteTest(data) {\r\n  return (dispatch) => {\r\n    axios({\r\n      method: 'delete',\r\n      url: config.baseURLApi+\"delete_test/\"+data.id,\r\n      })\r\n    .then((response) => {\r\n      return response.data.data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(fetchTestsFailure(error))\r\n    });\r\n    }\r\n}\r\n// Handle HTTP errors since fetch won't.\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\nexport function updateTestPdf(data) {\r\n  return (dispatch) => {\r\n    axios.post(config.baseURLApi+'update_pdf', {user_id: data.user_id, pdf_blob: data.blob, order_id: data.order_id})\r\n      .then(function (response) {\r\n        console.log(\"respose from action\", response);\r\n        dispatch(updateTestPdfSuccess(response.data.test))\r\n      })\r\n    .catch((error) => {\r\n      dispatch(fetchTestsFailure(error))\r\n    });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}