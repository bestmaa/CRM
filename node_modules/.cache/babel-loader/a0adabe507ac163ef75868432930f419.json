{"ast":null,"code":"import _objectSpread from \"D:\\\\30-12\\\\setup 2 new\\\\final file\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { FETCH_BLOGS_BEGIN, FETCH_BLOGS_SUCCESS, FETCH_BLOGS_FAILURE, EDIT_BLOGS_SUCCESS } from '../actions/blog';\nvar initialState = {\n  items: [],\n  ary: [],\n  loading: false,\n  error: null,\n  blog: null,\n  ary_url: ''\n};\nexport default function blogReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_BLOGS_BEGIN:\n      console.log(\"begin\"); // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_BLOGS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.blogs,\n        ary: action.payload.ary\n      });\n\n    case FETCH_BLOGS_FAILURE:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    case EDIT_BLOGS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        blog: action.payload.blogs,\n        ary_url: action.payload.ary\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/30-12/setup 2 new/final file/src/reducers/blog.js"],"names":["FETCH_BLOGS_BEGIN","FETCH_BLOGS_SUCCESS","FETCH_BLOGS_FAILURE","EDIT_BLOGS_SUCCESS","initialState","items","ary","loading","error","blog","ary_url","blogReducer","state","action","type","console","log","payload","blogs"],"mappings":";AAAA,SACEA,iBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,kBAJF,QAKO,iBALP;AAOA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,GAAG,EAAE,EAFc;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,IAAI,EAAE,IALa;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;AASA,eAAe,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBR,YAAsB;AAAA,MAARS,MAAQ;;AAChE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKd,iBAAL;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EADA,CAEE;AACA;;AACA,+BACKJ,KADL;AAEEL,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKP,mBAAL;AACE;AACA;AACA,+BACKW,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEF,QAAAA,KAAK,EAAEQ,MAAM,CAACI,OAAP,CAAeC,KAHxB;AAIEZ,QAAAA,GAAG,EAAEO,MAAM,CAACI,OAAP,CAAeX;AAJtB;;AAOF,SAAKJ,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACKU,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEK,MAAM,CAACI,OAAP,CAAeT,KAHxB;AAIEH,QAAAA,KAAK,EAAE;AAJT;;AAOF,SAAKF,kBAAL;AACE;AACA;AACA,+BACKS,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEE,QAAAA,IAAI,EAAEI,MAAM,CAACI,OAAP,CAAeC,KAHvB;AAIER,QAAAA,OAAO,EAAEG,MAAM,CAACI,OAAP,CAAeX;AAJ1B;;AAMF;AACE;AACA,aAAOM,KAAP;AA/CJ;AAiDD","sourcesContent":["import {\r\n  FETCH_BLOGS_BEGIN,\r\n  FETCH_BLOGS_SUCCESS,\r\n  FETCH_BLOGS_FAILURE,\r\n  EDIT_BLOGS_SUCCESS\r\n} from '../actions/blog';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  ary: [],\r\n  loading: false,\r\n  error: null,\r\n  blog: null,\r\n  ary_url: '',\r\n};\r\n\r\nexport default function blogReducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case FETCH_BLOGS_BEGIN:\r\n    console.log(\"begin\");\r\n      // Mark the state as \"loading\" so we can show a spinner or something\r\n      // Also, reset any errors. We're starting fresh.\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case FETCH_BLOGS_SUCCESS:\r\n      // All done: set loading \"false\".\r\n      // Also, replace the items with the ones from the server\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        items: action.payload.blogs,\r\n        ary: action.payload.ary\r\n      };\r\n\r\n    case FETCH_BLOGS_FAILURE:\r\n      // The request failed. It's done. So set loading to \"false\".\r\n      // Save the error, so we can display it somewhere.\r\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\r\n      //\r\n      // This is all up to you and your app though:\r\n      // maybe you want to keep the items around!\r\n      // Do whatever seems right for your use case.\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload.error,\r\n        items: []\r\n      };\r\n\r\n    case EDIT_BLOGS_SUCCESS:\r\n      // All done: set loading \"false\".\r\n      // Also, replace the items with the ones from the server\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        blog: action.payload.blogs,\r\n        ary_url: action.payload.ary\r\n      };\r\n    default:\r\n      // ALWAYS have a default case in a reducer\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}